'use strict';

var gulp = require('gulp');
var merge = require('merge');
var rollup = require('rollup');
var resolve = require( 'rollup-plugin-node-resolve' );
var commonjs = require( 'rollup-plugin-commonjs' );
var typescript = require('rollup-plugin-typescript2');
var uglify = require('gulp-uglify-es').default;
var rename = require("gulp-rename");


function entry( changes ) {

    var options = {
        name:'main',
        dest:'public/out',
        src: './src/main.ts',
        typescript: { check:false },
        bundle: { format: 'iife', sourcemap: true },
        resolve: { jsnext: true, main: true, browser:true },
        uglify: {}
    }

    options = merge( options, changes );

    // inject autogenerated settings
    options.bundle.file = ( options.bundle.file ) ? options.bundle.file : options.dest + '/' + options.name + '.js', 
    options.bundle.name = ( options.bundle.name ) ? options.bundle.name : options.name;


    gulp.task( 'ln:minify', () => {
        return gulp.src( options.dest + "/" + options.bundle.name + ".js" )
            .pipe( rename( options.bundle.name + ".min.js") )
            .pipe( uglify( options.uglify ) )
            .pipe( gulp.dest( options.dest ) );
    });


    gulp.task( 'ln:bundle', () => {
        return rollup.rollup({
            input: options.src,
            plugins: [
                typescript( options.typescript ),
                resolve( options.resolve ),
                commonjs(),
            ]
        }).then( bundle => {
            return bundle.write( options.bundle );
        });
    });


    return gulp.series( 'ln:bundle', 'ln:minify' );
}

module.exports = entry;